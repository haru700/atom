{
  "_args": [
    [
      {
        "raw": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
        "spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
        "type": "local"
      },
      "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/apm-install-dir-11746-1265-dp82gs.ukzdc59udi"
    ]
  ],
  "_from": "../d-11746-1265-91u8hd.deiu48to6r/package.tgz",
  "_id": "vim-modeline@0.5.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/vim-modeline",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
    "spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11746-1265-91u8hd.deiu48to6r/package.tgz",
  "_shasum": "7ae6dba7441e5decb1b880f9316cadbb873ac431",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-1265-91u8hd.deiu48to6r/package.tgz",
  "_where": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/apm-install-dir-11746-1265-dp82gs.ukzdc59udi",
  "bugs": {
    "url": "https://github.com/fkfk/vim-modeline/issues"
  },
  "configSchema": {
    "readLineNum": {
      "type": "integer",
      "default": 5,
      "minimum": 1
    },
    "prefix": {
      "type": "array",
      "default": [
        "vi",
        "vim",
        "ex",
        "atom"
      ],
      "items": {
        "type": "string"
      }
    },
    "insertPrefix": {
      "type": "string",
      "enum": [
        "vi",
        "vim",
        "ex",
        "atom"
      ],
      "default": "atom"
    },
    "insertModelinePosition": {
      "type": "string",
      "enum": [
        "first row",
        "last row",
        "above cursor row",
        "below cursor row"
      ],
      "default": "last row"
    },
    "insertModelineType": {
      "type": "string",
      "enum": [
        "short",
        "long",
        "original"
      ],
      "default": "long"
    }
  },
  "dependencies": {
    "iconv-lite": "^0.4.13",
    "underscore-plus": "^1.6.6"
  },
  "description": "Enable Vim-style modeline in Atom.",
  "devDependencies": {},
  "engines": {
    "atom": ">=1.0.0"
  },
  "homepage": "https://github.com/fkfk/vim-modeline#readme",
  "keywords": [
    "vim",
    "format",
    "code",
    "style",
    "code-style"
  ],
  "license": "MIT",
  "main": "./lib/vim-modeline",
  "name": "vim-modeline",
  "optionalDependencies": {},
  "providedServices": {
    "vim-modeline-event-handler": {
      "description": "vim-modeline event handler",
      "versions": {
        "1.0.0": "provideVimModelineEventHandlerV1"
      }
    }
  },
  "readme": "# vim-modeline package\n\nEnable Vim-style modeline in Atom.\n\n## Supported options\n\n- `expandtab` / `noexpandtab`\n- `fileencoding`\n- `fileformat`\n- `filetype`\n- `spell` / `nospell`\n- `tabstop`\n\n## Example\n\n### Valid Vim-style modeline\n\n```coffeescript\n# vim:set expandtab tabstop=2 fenc=utf-8 ff=unix ft=coffee:\n```\n\n### Atom-specific modeline\n\n```coffeescript\n# atom:set useSoftTabs tabLength=2 encoding=utf-8 lineEnding=lf grammar=coffee:\n```\n\n## Atom-specific modeline\n\n- `useSoftTabs` -> `expandtab`\n- `encoding` -> `fileencoding`\n- `lineEnding` -> `fileformat`\n- `grammar` -> `filetype`\n- `tabLength` -> `tabstop`\n\n## Configuring filetype\n\nYou can add more filetype for a given language scope.\nTo do this, add the settings to the `~/.atom/config.cson` in the format below.\n\n```coffeescript\n'vim-modeline-filetypes':\n  # append scopeName\n  'as': [\n    'source.actionscript.3'\n  ]\n  # override scopeName\n  'markdown': 'text.md'\n```\n\n## vim-modeline Event Handler\n\nThis package can use the event handler using \"Service API\".\n\n- onDidParse\n- onDidSetLineEnding\n- onDidSetFileType\n- onDidSetEncoding\n- onDidSetSoftTabs\n- onDidSetTabLength\n\neg: get parse result in `init.coffee`.\n\n```coffeescript\natom.packages.serviceHub.consume \"vim-modeline-event-handler\", \"^1.0.0\", (handler) ->\n  handler.onDidParse ({editor, options}) ->\n    console.log editor\n    console.log options\n    someFunction(options)\n```\n\n## Conflict issue\n\nIf you use [auto-encoding](https://atom.io/packages/auto-encoding) package, file encoding doesn't match the modeline.\nIf you want use vim-modeline parse result, please invoke 'vim-modeline:detect' command after open TextEditor.\n\n## TODO\n\n- [ ] `softtabstop` support\n- [ ] `shiftwidth` support\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fkfk/vim-modeline.git"
  },
  "version": "0.5.2"
}
