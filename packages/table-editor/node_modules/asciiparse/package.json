{
  "_args": [
    [
      {
        "raw": "asciiparse@git+https://github.com/klorenz/asciiparse.git#master",
        "scope": null,
        "escapedName": "asciiparse",
        "name": "asciiparse",
        "rawSpec": "git+https://github.com/klorenz/asciiparse.git#master",
        "spec": "git+https://github.com/klorenz/asciiparse.git#master",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:klorenz/asciiparse.git#master",
          "sshUrl": "git+ssh://git@github.com/klorenz/asciiparse.git#master",
          "httpsUrl": "git+https://github.com/klorenz/asciiparse.git#master",
          "gitUrl": "git://github.com/klorenz/asciiparse.git#master",
          "shortcut": "github:klorenz/asciiparse#master",
          "directUrl": "https://raw.githubusercontent.com/klorenz/asciiparse/master/package.json"
        }
      },
      "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-11504-100227y.6f4o8yqfr/package.tgz"
    ]
  ],
  "_from": "git+https://github.com/klorenz/asciiparse.git#master",
  "_id": "asciiparse@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/table-editor/asciiparse",
  "_phantomChildren": {},
  "_requested": {
    "raw": "asciiparse@git+https://github.com/klorenz/asciiparse.git#master",
    "scope": null,
    "escapedName": "asciiparse",
    "name": "asciiparse",
    "rawSpec": "git+https://github.com/klorenz/asciiparse.git#master",
    "spec": "git+https://github.com/klorenz/asciiparse.git#master",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:klorenz/asciiparse.git#master",
      "sshUrl": "git+ssh://git@github.com/klorenz/asciiparse.git#master",
      "httpsUrl": "git+https://github.com/klorenz/asciiparse.git#master",
      "gitUrl": "git://github.com/klorenz/asciiparse.git#master",
      "shortcut": "github:klorenz/asciiparse#master",
      "directUrl": "https://raw.githubusercontent.com/klorenz/asciiparse/master/package.json"
    }
  },
  "_requiredBy": [
    "/table-editor"
  ],
  "_resolved": "git+https://github.com/klorenz/asciiparse.git#3f66c5e26fbc369a783a4025e82cb24ebbb695ed",
  "_shasum": "7c7c64d6e8f0a18f93a43a003806079a775442f8",
  "_shrinkwrap": null,
  "_spec": "asciiparse@git+https://github.com/klorenz/asciiparse.git#master",
  "_where": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-11504-100227y.6f4o8yqfr/package.tgz",
  "author": {
    "name": "Dallin Lauritzen",
    "email": "dallin@dallinlauritzen.com"
  },
  "bugs": {
    "url": "https://github.com/dlauritzen/asciiparse/issues"
  },
  "dependencies": {
    "underscore": "*"
  },
  "description": "Parse ascii tables into rows and columns.",
  "devDependencies": {},
  "gitHead": "3f66c5e26fbc369a783a4025e82cb24ebbb695ed",
  "homepage": "https://github.com/dlauritzen/asciiparse#readme",
  "name": "asciiparse",
  "optionalDependencies": {},
  "readme": "# ASCII Parse\n\nASCII table parser written for Node.js.\n\n## Install\n\nInstall using NPM\n\n``` Shell\nnpm install asciiparse\n```\n\n## Use\n\nasciiparse has three visible methods, based on how you store the data\n\n``` javascript\n\nvar asciiparse = require('asciiparse');\n\n// Read and parse a file\nasciiparse.parseFile(filename, [options], callback);\n\n// Parse buffers or strings\nasciiparse.parseBuffer(buffer, [options], callback);\nasciiparse.parseString(string, [options], callback);\n```\n\n## Options\n\nThe `options` field is optional and can be omitted in favor of the defaults. If options are provided, any missing values will default.\n\n* rowSeparator        ('-'): Separator between rows\n* colSeparator        ('|'): Separator between columns\n* junction            ('+'): Where `rowSeparator` and `colSeparator` meet. Corners of cells and the table.\n* multiline          (true): Whether body rows are separated by rowSeparator or newline\n* header             (true): If false, a two-dimensional array is returned. If true, the first row is treated as column names and an array of objects keyed by column is returned\n* emptyCells         (true): Whether to keep empty cells. If header is true, setting this to false may cause errors.\n* multilineSeparator ('\\n'): The character or string to insert between lines of a multiline cell when collapsed.\n* preHeaderRows         (0): How many rows are _NOT_ header data. Values greater than 0 are edge cases I personally needed to deal with.\n\n## Examples\n\n### Single Line, No Header Row\n\n```\n+-----------+--------------+\n| Athens    | Tue 11:14 PM |\n| Las Vegas | Tue  1:14 PM |\n| London    | Tue  9:14 PM |\n+-----------+--------------+\n```\n\nand \n\n```\n+-----------+--------------+\n| Athens    | Tue 11:14 PM |\n+-----------+--------------+\n| Las Vegas | Tue  1:14 PM |\n+-----------+--------------+\n| London    | Tue  9:14 PM |\n+-----------+--------------+\n```\n\nare equivalent in single line mode. When header mode is off, both evaluate to\n\n``` javascript\n[ ['Athens', 'Tue 11:14 PM'],\n  ['Las Vegas', 'Tue 1:14 PM'],\n  ['London', 'Tue 9:14 PM'] ]\n```\n\n### Single Line, Header Row\n\nModifying the example above to include a header row...\n\n```\n+-----------+--------------+\n| City      | Time         |\n+-----------+--------------+\n| Athens    | Tue 11:14 PM |\n| Las Vegas | Tue  1:14 PM |\n| London    | Tue  9:14 PM |\n+-----------+--------------+\n```\n\nevaluates to\n\n``` javascript\n[\n\t{ City: 'Athens', Time: 'Tue 11:14 PM' },\n\t{ City: 'Las Vegas', Time: 'Tue 1:14 PM' },\n\t{ City: 'London', Time: 'Tue 9:14 PM' },\n]\n```\n\n### Multiple Line\n\nIn multiline mode, rows _MUST_ be separated by `junction` and `rowSeparator`. Otherwise all rows would be combined.\n\n\n```\n+--------+--------------+\n| City   | Time         |\n+--------+--------------+\n| Athens | Tue 11:14 PM |\n+--------+--------------+\n| Las    | Tue  1:14 PM |\n| Vegas  |              |\n+--------+--------------+\n| London | Tue  9:14 PM |\n+--------+--------------+\n```\n\n### Custom separators\n\n```\n*====*============*====================*\n; a  ; apple      ; Some longer string ;\n; b  ; banana     ; hi                 ;\n; c  ; carrot     ; meow               ;\n; e  ; elephants  ;                    ;\n*====*============*====================*\n```\n\nparses correctly, given the custom options:\n\n``` javascript\n{\n\trowSeparator: '=',\n\tcolSeparator: ';',\n\tjunction: '*',\n\t\n\tmultiline: false,\n\theader: false\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dlauritzen/asciiparse.git"
  },
  "version": "0.1.1"
}
