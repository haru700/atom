{
  "_args": [
    [
      {
        "raw": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
        "spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
        "type": "local"
      },
      "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/apm-install-dir-11746-4325-1vje63.cefeyfzuxr"
    ]
  ],
  "_from": "../d-11746-4325-1iw2zk.vakur3sor/package.tgz",
  "_id": "html-to-css@0.2.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/html-to-css",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
    "spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-11746-4325-1iw2zk.vakur3sor/package.tgz",
  "_shasum": "bbe3338c579264be15efbec6749beb2c4d250e86",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-11746-4325-1iw2zk.vakur3sor/package.tgz",
  "_where": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/apm-install-dir-11746-4325-1vje63.cefeyfzuxr",
  "activationCommands": {
    "atom-workspace": "html-to-css:generate"
  },
  "author": {
    "name": "Szymon Pilkowski",
    "email": "szymon.pilkowski@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/ardcore/atom-html-to-css/issues"
  },
  "dependencies": {
    "htmlparser2": "^3.9.0",
    "partial-any": "0.0.2"
  },
  "description": "Generate CSS classes from HTML structure",
  "devDependencies": {},
  "engines": {
    "atom": ">=1.0.0 <2.0.0"
  },
  "homepage": "https://github.com/ardcore/atom-html-to-css#readme",
  "keywords": [
    "html",
    "css",
    "bem",
    "productivity"
  ],
  "license": "MIT",
  "main": "./lib/html-to-css",
  "name": "html-to-css",
  "optionalDependencies": {},
  "readme": "# atom html-to-css package\n\nGenerates CSS boilerplate based on the selected HTML.\n\n - Only cares about classes, ignores id's/other possible selectors\n - Supports CSS, SCSS, Sass, LESS and possibly other syntaxes\n - BEM support (actually, more like a *BE* support for now. Modifiers support will be added if needed)\n - Configurable nesting, grouping and formatting\n - \"Supports\" JSX (recognizes the `className` attribute)\n - Is *forgiving* (meaning it should work even with invalid HTML code)\n\n# demo\n\n![atom html to css](http://dracul.kill.pl/~ard/htmltocss.gif)\n\n# settings\n\n## BEM grouping\nkey: `html-to-css.bem-group`, type: `boolean`, default: `false`\n\nShould BEM-style declarations be grouped and nested in a SCSS-style?\n\nWhen *true*:\n\n    <section class=\"introduction\">\n      <h1 class=\"introduction__header\"></h1>\n      <p class=\"introduction__text\"></p>\n    </section>\n\n&darr;\n\n    .introduction {\n\n    \t&__header {\n\n    \t}\n\n    \t&__text {\n\n    \t}\n\n    }\n\nWhen *false*, the same HTML code becomes:\n\n    .introduction {\n\n    }\n\n    .introduction__header {\n\n    }\n\n    .introduction__text {\n\n    }\n\n## BEM separator token\nkey: `html-to-css.bem-separator`, type: `string`, default: `__`\n\nCharacter(s) used as a BLOCK*__*ELEMENT separator in BEM.\n\n## rulelist open token\nkey: `html-to-css.rulelist-open`, type: `string`, default: ` {\\n\\n`\n\nCharacter(s) to output when opening rulelists (including whitespaces)\n\n## rulelist close token\nkey: `html-to-css.rulelist-close`, type: `string`, default: `}\\n\\n`\n\nCharacter(s) to output when opening rulelists (including whitespaces)\n\nYou can change them to fine-tune the output format to your own liking. Just remove `{` and `}` to support SASS-like indented syntax.\n\n## Grouping character\nkey: `html-to-css.grouping-character`, type: `string`, default: `&`\n\nCharacter(s) to be used in output when referring to the parent element while nesting declarations SCSS-style.\n\n# key bindings\n\nTo avoid conflicts and promote peace, this package doesn't register any keys by default. Do it yourself, or just paste the following lines in `~/.atom/keymap.cson`:\n\n    'atom-text-editor':\n      'alt-x': 'html-to-css:generate'\n\nIt'll try to register <kbd>alt</kbd>+<kbd>x</kbd> key shortcut.\n\n# indentation\n\n`\\t` is used to indent, but Atom seems to be clever enough to convert it to your default style when pasting. Let me know if it's not doing that.\n\n# parsing\n\ndue to the forgiving nature of the excellent [htmlparser2](https://github.com/fb55/htmlparser2) used under the hood, this plugin is able to deal with:\n * incomplete selections (wouldn't it be faster if you could select opening tags only? well, you can)\n * not-really-valid-HTML-code (JSX, anyone?)\n * general mess (really. you can hit <kbd>cmd</kbd>+<kbd>a</kbd> in this markdown file and it'll still parse the few HTML lines from the code sample)\n\n# TODO\n\n - ~extend it with different transformers/formatters as settings.~\n\n Contributions welcomed.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ardcore/atom-html-to-css.git"
  },
  "version": "0.2.2"
}
