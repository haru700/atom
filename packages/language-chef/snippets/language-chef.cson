'.source.ruby.chef':
  'action':
    'prefix': 'action'
    'body': 'action ${1:nothing}'
  'apt_package':
    'prefix': 'apt_package'
    'body': 'apt_package \'${1:name}\' do\n  action :${2:install}\nend'
  'aws_auto_scaling_group':
    'prefix': 'aws_auto_scaling_group'
    'body': 'aws_auto_scaling_group \'${1:name}\' do\n  availability_zones \[ \'${2:us-west-1}\' \]\n  desired_capacity ${3:2}\n  min_size ${4:1}\n  max_size ${5:3}\n  launch_configuration \'${6:ref-launch-configuration}\'\n  load_balancers \'${7:ref-load-balancer}\'\n  options subnets: \'${8:ref-subnets}\'\nend'
  'aws_cache_cluster':
    'prefix': 'aws_cache_cluster'
    'body': 'aws_cache_cluster \'${1:name}\' do\n  az_mode \'${2:single-az}\'\n  engine \'${3:name}\'\n  engine_version \'${4:1.2.3}\'\n  node_type \'${5:cache.m3.large}\'\n  number_nodes ${6:10}\n  preferred_availability_zones [\n    \'${7:PreferredAvailabilityZones.member.1=us-east-1a}\'\n  ]\nend'
  'aws_cache_replication_group':
    'prefix': 'aws_cache_replication_group'
    'body': 'aws_cache_replication_group \'${1:name}\' do\n  automatic_failover ${2:true}\n  engine \'${3:name}\'\n  engine_version \'${4:1.2.3}\'\n  node_type \'${5:cache.m3.large}\'\n  number_cache_clusters ${6:3}\n  preferred_availability_zones [\n    \'${7:PreferredAvailabilityZones.member.1=us-east-1a}\'\n  ]\n  subnet_group_name \'${8:subnet-1}\'\nend'
  'aws_cache_subnet_group':
    'prefix': 'aws_cache_subnet_group'
    'body': 'aws_cache_subnet_group \'${1:name}\' do\n  description \'${2:Description of cache subnet group.}\'\n  subnets \[ \'${3:subnet}\', \'${4:subnet}\' \]\nend'
  'aws_cloudsearch_domain':
    'prefix': 'aws_cloudsearch_domain'
    'body': 'aws_cloudsearch_domain \'${1:ref-cs-domain}\' do\n  instance_type \'${2:search.m1.small}\'\n  partition_count ${3:2}\n  replication_count ${4:2}\n  index_fields \[${5:}\]\nend'
  'aws_dhcp_options':
    'prefix': 'aws_dhcp_options'
    'body': 'aws_dhcp_options \'${1:name}\' do\n  domain_name \'${2:example.com}\'\n  domain_name_servers ${3:\%w\(8.8.8.8 8.8.4.4\)}\n  ntp_servers ${4:\%w\(8.8.8.8 8.8.4.4\)}\n  netbios_name_servers ${5:\%w\(8.8.8.8 8.8.4.4\)}\n  aws_tags :${6:chef_type} \'${7:aws_dhcp_options}\'\nend'
  'aws_ebs_volume':
    'prefix': 'aws_ebs_volume'
    'body': 'aws_ebs_volume \'${1:name}\' do\n  machine \'${2:ref-machine-1}\'\n  availability_zone \'${3:a}\'\n  size ${4:100}\n  iops ${5:3000}\n  volume_type \'${6:io1}\'\n  encrypted ${7:true}\n  device \'${8:/dev/sda2}\'\n  aws_tags :${9:chef_type} \'${10:aws_ebs_volume}\'\nend'
  'aws_eip_address':
    'prefix': 'aws_eip_address'
    'body': 'aws_eip_address \'${1:name}\' do\n  machine \'${2:ref-machine-1}\'\n  associate_to_vpc ${3:true}\n  public_ip \'${4:205.32.21.0}\'\nend'
  'aws_image':
    'prefix': 'aws_image'
    'body': 'aws_image \'${1:name}\' do\n  image_id \'${2:image-1}\'\nend'
  'aws_instance':
    'prefix': 'aws_instance'
    'body': 'aws_instance \'${1:name}\' do\n  instance_id \'${2:instance-1}\'\nend'
  'aws_internet_gateway':
    'prefix': 'aws_internet_gateway'
    'body': 'aws_internet_gateway \'${1:name}\' do\n  internet_gateway_id \'${2:1234567890}\'\nend'
  'aws_key_pair':
    'prefix': 'aws_key_pair'
    'body': 'aws_key_pair \'${1:name}\' do\n  allow_overwrite ${2:true}\n  private_key_options\(\{ ${3:HASH} \}\)\nend'
  'aws_launch_configuration':
    'prefix': 'aws_launch_configuration'
    'body': 'aws_launch_configuration \'${1:ref-launch-configuration}\' do\n  image \'${2:image-1}\'\n  instance_type \'${3:t2.micro}\'\n  options ${4:security_groups}: \'${5:ref-security-group}\'\nend'
  'aws_loadbalancer':
    'prefix': 'aws_loadbalancer'
    'body': 'aws_loadbalancer \'${1:name}\' do\n  loadbalancer_id \'${2:lb-1}\'\nend'
  'aws_network_acl':
    'prefix': 'aws_network_acl'
    'body': 'aws_network_acl \'${1:name}\' do\n  vpc \'${2:ref-vpc}\'\n  inbound_rules \'${3:0.0.0.0\/0}\' => \[ ${4:22, 80} \]\n  outbound_rules \[\n    \{:port => ${5:22..22,} :protocol => :${6:tcp}, :destinations => \[${7:0.0.0.0\/0}\] \}\n  aws_tags :${8:chef_type} \'${9:aws_security_group}\'\nend'
  'aws_network_interface':
    'prefix': 'aws_network_interface'
    'body': 'aws_network_interface \'${1:name}\' do\n  machine \'${2:ref-machine-1}\'\n  device_index ${3:2}\n  subnet \'${4:ref-subnet}\'\n  security_groups \[\'${5:ref-security-group}\'\]\n  description \'${6:ref-eni-desc}\'\nend'
  'aws_rds_instance':
    'prefix': 'aws_rds_instance'
    'body': 'aws_rds_instance \'${1:rds-instance}\' do\n  engine \'${2:postgres}\'\n  publicly_accessible ${3:false}\n  db_instance_class \'${4:db.t1.micro}\'\n  master_username \'${5:user}\'\n  master_user_password \'${6:password}\'\n  multi_az \'${7:false}\'\n  db_subnet_group_name \'${8:db-subnet-group}\'\nend'
  'aws_rds_subnet_group':
    'prefix': 'aws_rds_subnet_group'
    'body': 'aws_rds_subnet_group \'${1:db-subnet-group}\' do\n  db_subnet_group_description \'${2:description}\'\n  subnets \[\'subnet\', \'${3:subnet2.aws_object.id}\' \]\nend'
  'aws_route_table':
    'prefix': 'aws_route_table'
    'body': 'aws_route_table \'${1:name}\' do\n  vpc \'${2:ref-vpc}\'\n  routes \'${3:0.0.0.0\/0}\' => :${4:internet_gateway}\n  aws_tags :${5:chef_type} \'${6:aws_route_table}\'\nend'
  'aws_s3_bucket':
    'prefix': 'aws_s3_bucket'
    'body': 'aws_s3_bucket \'${1:name}\' do\n  action :${2:create}\nend'
  'aws_security_group':
    'prefix': 'aws_security_group'
    'body': 'aws_security_group \'${1:name}\' do\n  vpc \'${2:ref-vpc}\'\n  inbound_rules \'${3:0.0.0.0}\' => \[ ${4:22, 80} \]\n  outbound_rules \[\n    \{:port => ${5:22..22,} :protocol => :${6:tcp}, :destinations => \[\'${7:0.0.0.0\/0}\'\] \}\n  aws_tags :${8:chef_type} \'${9:aws_security_group}\'\nend'
  'aws_server_certificate':
    'prefix': 'aws_server_certificate'
    'body': 'aws_server_certificate \'${1:name}\' do\n  certificate_body \'${2:path_to_certificate}\'\n  private_key \'${3:path_to_private_key}\'\nend'
  'aws_sns_topic':
    'prefix': 'aws_sns_topic'
    'body': 'aws_sns_topic \'${1:name}\' do\n  arn \'${2:arn:aws:sns:us-west-1:5060091557628:seapower}\'\nend'
  'aws_sqs_queue':
    'prefix': 'aws_sqs_queue'
    'body': 'aws_sqs_queue \'${1:name}\' do\n  options \(\{ ${2:HASH} \}\)\nend'
  'aws_subnet':
    'prefix': 'aws_subnet'
    'body': 'aws_subnet \'${1:name}\' do\n  vpc \'${2:ref-vpc}\'\n  cidr_block \'${3:10.0.0.0\/24}\'\n  availability_zone \'${4:us-west-1a}\'\n  map_public_ip_on_launch ${5:true}\n  route_table \'${6:ref-public}\'\n  aws_tags :${7:chef_type} \'${8:aws_subnet}\'\nend'
  'aws_vpc':
    'prefix': 'aws_vpc'
    'body': 'aws_vpc \'${1:name}\' do\n  cidr_block \'${2:10.0.0.0\/24}\'\n  internet_gateway ${3:true}\n  instance_tenancy :${4:default}\n  main_routes \'${5:0.0.0.0\/0}\' => :${6:internet_gateway}\n  dhcp_options \'${7:ref-dhcp-options}\'\n  enable_dns_support ${8:true}\n  enable_dns_hostnames ${9:true}\n  aws_tags :${10:chef_type} \'${11:aws_vpc}\'\nend'
  'azure_cloud_service':
    'prefix': 'azure_cloud_service'
    'body': 'azure_cloud_service \'${1:name}\' do\n  action :${2:create}\nend'
  'azure_sql_server':
    'prefix': 'azure_sql_server'
    'body': 'azure_sql_server \'${1:name}\' do\n  action :${2:create}\nend'
  'azure_storage_account':
    'prefix': 'azure_storage_account'
    'body': 'azure_storage_account \'${1:name}\' do\n  action :${2:create}\nend'
  'bash':
    'prefix': 'bash'
    'body': 'bash \'${1:a bash script}\' do\n  user \'${2:root}\'\n  cwd \'${3:/tmp}\'\n  code <<-EOH\n  ${4:wget http://www.example.com/tarball.tar.bz\n  tar -zxf tarball.tar.gz\n  cd tarball\n  ./configure\n  make\n  make install}\n  EOH\nend'
  'bff_package':
    'prefix': 'bff_package'
    'body': 'bff_package \'${1:name}\' do\n  action :${2:install}\nend'
  'breakpoint':
    'prefix': 'breakpoint'
    'body': 'breakpoint \'${1:name}\' do\n  action :${2:break}\nend'
  'chef_gem':
    'prefix': 'chef_gem'
    'body': 'chef_gem \'${1:right_aws}\' do\n  action :${2:install}\nend'
  'chef_handler':
    'prefix': 'chef_handler'
    'body': 'chef_handler \'${1:name_of_handler}\' do\n  source \'${2:path_to_source}\'\n  action :${3:enable}\nend'
  'cookbook_file':
    'prefix': 'cookbook_file'
    'body': 'cookbook_file \'${1:/tmp/testfile}\' do\n  source \'${2:testfile}\'\n  owner \'${3:root}\'\n  group \'${4:root}\'\n  mode ${5:00644}\nend'
  'cron':
    'prefix': 'cron'
    'body': 'cron \'${1:name}\' do\n  hour \'${2:5}\'\n  minute \'${3:5}\'\n  command \'${3:/bin/script}\'\nend'
  'csh':
    'prefix': 'csh'
    'body': 'csh \'${1:a csh script}\' do\n  user \'${2:root}\'\n  cwd \'${3:/tmp}\'\n  code <<-EOH\n  ${4:foreach i ( 10 15 20 40 )\n    echo $i\n  end}\n  EOH\nend'
  'dsc_resource':
    'prefix': 'dsc_resource'
    'body': 'dsc_resource \'${1:name}\' do\n  resource :${2:archive}\n  property :${3:ensure}, \'${4:Present}\'\n  property :${5:path} \"${6:C:\\\\Users\\\\Public\\\\Documents\\\\example.zip\}"\n  property :${7:destination} \"${8:C:\\\\Users\\\\Public\\\\Documents\\\\ExtractionPath\}"\nend'
  'dsc_script':
    'prefix': 'dsc_script'
    'body': 'dsc_script \'${1:name}\' do\n  code <<-EOH\n  ${2:}\n  EOH\nend'
  'deploy':
    'prefix': 'deploy'
    'body': 'deploy \'${1:/my/deploy/dir}\' do\n  repo \'${2:git@github.com/whoami/project}\'\n  user \'${3:deploy_ninja}\'\n  migrate ${4:true}\n  migration_command \'${5:rake db:migrate}\'\n  environment ${6:\'RAILS_ENV\' => \'production\', \'OTHER_ENV\' => \'foo\'}\n  action :${7:deploy}\n  scm_provider ${8:Chef::Provider::Git}\nend'
  'directory':
    'prefix': 'directory'
    'body': 'directory \'${1:/tmp/something}\' do\n  owner \'${2:root}\'\n  group \'${3:root}\'\n  mode ${4:00755}\n  recursive true\n  action :create\nend'
  'dpkg_package':
    'prefix': 'dpkg_package'
    'body': 'dpkg_package \'${1:name}\' do\n  action :${2:install}\nend'
  'easy_install_package':
    'prefix': 'easy_install_package'
    'body': 'easy_install_package \'${1:name}\' do\n  action :${2:install}\nend'
  'env':
    'prefix': 'env'
    'body': 'env \'${1:ComSpec}\' do\n  value \'${2:C:\\\\Windows\\\\system32\\\\cmd.exe}\'\nend'
  'erl_call':
    'prefix': 'erl_call'
    'body': 'erl_call \'${1:list names}\' do\n  code \'${2:net_adm:names().}\'\n  distributed ${3:true}\n  node_name \'${4:chef@latte}\'\nend'
  'execute':
    'prefix': 'execute'
    'body': 'execute \'${1:name}\' do\n  command \'${2:command}\'\n  action :run\nend'
  'file':
    'prefix': 'file'
    'body': 'file \'${1:/tmp/something}\' do\n  owner \'${2:root}\'\n  group \'${3:root}\'\n  mode ${4:00755}\n  action :${5:create}\nend'
  'freebsd_package':
    'prefix': 'freebsd_package'
    'body': 'freebsd_package \'${1:name}\' do\n  action :${2:install}\nend'
  'gem_package':
    'prefix': 'gem_package'
    'body': 'gem_package \'${1:gem}\' do\n  action :${2:install}\nend'
  'git':
    'prefix': 'git'
    'body': 'git \'${1:/tmp/app_name}\' do\n  repository \'${2:git@github.com/whoami/project}\'\n  reference \'${3:abc1234}\'\n  action :${4:sync}\nend'
  'group':
    'prefix': 'group'
    'body': 'group \'${1:group}\' do\n  members [\'${2:kyle}\', \'${3:cartman}\']\n  action :${4:create}\nend'
  'homebrew_package':
    'prefix': 'homebrew_package'
    'body': 'homebrew_package \'${1:name}\' do\n  action :${2:install}\nend'
  'http_request':
    'prefix': 'http_request'
    'body': 'http_request \'${1:description}\' do\n  url \'${2:http://example.com/check_in}\'\n  message :${3:key} => \'${4:value}\'\n  action :${5:post}\nend'
  'ifconfig':
    'prefix': 'ifconfig'
    'body': 'ifconfig \'${1:192.168.0.1}\' do\n  device \'${2:eth0}\'\nend'
  'ignore_failure':
    'prefix': 'ignore_failure'
    'body': 'ignore_failure ${1:true}'
  'inc':
    'prefix': 'inc'
    'body': 'include_recipe "${1:example::recipe}"'
  'ips_package':
    'prefix': 'ips_package'
    'body': 'ips_package \'${1:name}\' do\n  action :${2:install}\nend'
  'link':
    'prefix': 'link'
    'body': 'link \'${1:/tmp/passwd}\' do\n  to \'${2:/etc/passwd}\'\nend'
  'remote':
    'prefix': 'remote'
    'body': 'remote_file \'${1:/opt/chef/file}\' do\n  source \'${2:http://myfile}\'\n  owner \'${3:root}\'\n  group \'${4:$3}\'\n  checksum \'${5:abc123}\'\nend'
  'loadbalancer':
    'prefix': 'loadbalancer'
    'body': 'loadbalancer \'${1:name}\' do\n  action :${2:create}\nend'
  'log':
    'prefix': 'log'
    'body': 'log \'${1:name}\' do\n  message \"${2:This is a message that will be added to the log.}\"\n  level :${3:info}\nend'
  'machine':
    'prefix': 'machine'
    'body': 'machine \'${1:name}\' do\n  action :${2:converge}\nend'
  'machine_batch':
    'prefix': 'machine_batch'
    'body': 'machine_batch \'${1:name}\' do\n  ${2:}\nend'
  'machine_execute':
    'prefix': 'machine_execute'
    'body': 'machine_execute \'${1:name}\' do\n  action :${2:run}\nend'
  'machine_file':
    'prefix': 'machine_file'
    'body': 'machine_file \'${1:name}\' do\n  action :${2:upload}\nend'
  'machine_image':
    'prefix': 'machine_image'
    'body': 'machine_image \'${1:name}\' do\n  action :${2:create}\nend'
  'macports_package':
    'prefix': 'macports_package'
    'body': 'macports_package \'${1:name}\' do\n  action :${2:install}\nend'
  'meta':
    'prefix': 'meta'
    'body': 'name "${1:COOKBOOK_NAME}"\nmaintainer\n"${2:YOUR_COMPANY_NAME}"\nmaintainer_email "${3:YOUR_EMAIL}"\nlicense "${4:All rights reserved}"\n description "${5:Installs/Configures example}"\nlong_description IO.read(File.join(File.dirname(__FILE__), \'README.md\'))\nversion "${6:0.0.1}"'
  'mdadm':
    'prefix': 'mdadm'
    'body': 'mdadm \'${1:/dev/md0}\' do\n  devices [ ${2:\'/dev/sda\', \'/dev/sdb\'} ]\n  level ${3:1}\n  action [ ${4::create, :assemble} ]\nend'
  'mount':
    'prefix': 'mount'
    'body': 'mount \'${1:/mnt/volume1}\' do\n  device \'${2:volume1}\'\n  fstype \'${3:xfs}\'\n  action :${4:mount}\nend'
  'not_if':
    'prefix': 'not_if'
    'body': 'not_if "${1}"'
  'ohai':
    'prefix': 'ohai'
    'body': 'ohai \'${1:reload_passwd}\' do\n  plugin \'${2:passwd}\'\n  action :${3:nothing}\nend'
  'only_if':
    'prefix': 'only_if'
    'body': 'only_if "${1}"'
  'openbsd_package':
    'prefix': 'openbsd_package'
    'body': 'openbsd_package \'${1:name}\' do\n  action :${2:install}\nend'
  'package':
    'prefix': 'package'
    'body': 'package \'${1:name}\' do\n  action :${2:install}\nend'
  'provider':
    'prefix': 'provider'
    'body': 'provider Chef::Provider::${1:Package::Rubygems}\n'
  'pacman_package':
    'prefix': 'pacman_package'
    'body': 'pacman_package \'${1:name}\' do\n  action :${2:install}\nend'
  'paludis_package':
    'prefix': 'paludis_package'
    'body': 'paludis_package \'${1:name}\' do\n  action :${2:install}\nend'
  'perl':
    'prefix': 'perl'
    'body': 'perl \'${1:a perl script}\' do\n  user \'${2:root}\'\n  cwd \'${3:/tmp}\'\n  code <<-EOH\n  ${4:# hello.pl\n  #  - Displays a warm greeting\n  print \"Hello, World!\\n\";}\n  EOH\nend'
  'portage_package':
    'prefix': 'portage_package'
    'body': 'portage_package \'${1:name}\' do\n  action :${2:install}\nend'
  'powershell_script':
    'prefix': 'powershell_script'
    'body': 'powershell_script \'${1:cwd-to-win-env-var}\' do\n  cwd \'${2:%TEMP%}\'\n  code <<-EOH\n  ${3:$stream = [System.IO.StreamWriter] \"./temp-write-from-chef.txt\"\n  $stream.WriteLine(\"chef on windows rox yo!\")\n  $stream.close()}\n  EOH\nend'
  'python':
    'prefix': 'python'
    'body': 'python \'${1:a python script}\' do\n  user \'${2:root}\'\n  cwd \'${3:/tmp}\'\n  code <<-EOH  ${4:friends = [\'john\', \'pat\', \'gary\', \'michael\']\n  for i, name in enumerate(friends):\n      print \"iteration {iteration} is {name}\".format(iteration=i, name=name)}\nend'
  'reboot':
    'prefix': 'reboot'
    'body': 'reboot \'${1:now}\' do\n  action :${2:nothing}\n  reason \'${3:Need to reboot when the run completes successfully.}\'\n  delay_mins ${4:5}\nend'
  'registry_key':
    'prefix': 'registry_key'
    'body': 'registry_key \'${1:HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\name_of_registry_key}\' do\n  values [{:name => \'${2:NewRegistryKeyValue}\', :type => :${3:string}, :data => ${4:\'C:\\\\Windows\\\\System32\\\\file_name.bmp\'}}]\n  action :${5:create}\nend'
  'remote_directory':
    'prefix': 'remote_directory'
    'body': 'remote_directory \'${1:/foo/bar/baz}\' do\n  owner \'${2:root}\'\n  group \'${3:root}\'\n  mode ${3:00755}\n  action :${4:create}\nend'
  'remote_file':
    'prefix': 'remote_file'
    'body': 'remote_file \'${1:/opt/chef/file}\' do\n  source \'${2:http://myfile}\'\n  owner \'${3:root}\'\n  group \'${4:root}\'\n  checksum \'${5:abc123}\'\nend'
  'retries':
    'prefix': 'retries'
    'body': 'retries ${1:1}\n  retry_delay ${2:2}'
  'role':
    'prefix': 'role'
    'body': 'name "${1:role name}"\ndescription "${2:Description for the role}"\nenv_run_lists "${3:env name}" => [\n ]\nrun_list ""\ndefault_attributes(\n   ${4::attribute => "example"}\n)'
  'route':
    'prefix': 'route'
    'body': 'route \'${1:10.0.1.10/32}\' do\n  gateway \'${2:10.0.0.20}\'\n  device \'${3:eth1}\'\nend'
  'rpm_package':
    'prefix': 'rpm_package'
    'body': 'rpm_package \'${1:name}\' do\n  action :${2:install}\nend'
  'ruby_block':
    'prefix': 'ruby_block'
    'body': 'ruby_block \'${1:desc}\' do\n  block do\n    ${1:puts \'awesome\'}\n  end\nend'
  'script':
    'prefix': 'script'
    'body': 'script \'${1:desc}\' do\n  interpreter \'${2:bash}\'\n  user \'${3:root}\'\n  cwd \'${4:/tmp}\'\n  code <<-EOF\n\t${5:script commands}\n  EOF\nend'
  'service':
    'prefix': 'service'
    'body': 'service \'${1:service}\' do\n  supports :${2:status} => true\n  action [ :${3:enable}, :${3:start} ]\nend'
  'smartos_package':
    'prefix': 'smartos_package'
    'body': 'smartos_package \'${1:name}\' do\n  action :${2:install}\nend'
  'solaris_package':
    'prefix': 'solaris_package'
    'body': 'solaris_package \'${1:name}\' do\n  action :${2:install}\nend'
  'subscribes':
    'prefix': 'subscribes'
    'body': 'subscribes :${1:restart}, "${2:template}[${3:name}]"'
  'subversion':
    'prefix': 'subversion'
    'body': 'subversion \'${1:CouchDB Edge}\' do\n  repository \'${2:http://svn.apache.org/repos/asf/couchdb/trunk}\'\n  revision \'${3:HEAD}\'\n  destination \'${4:/opt/mysources/couch}\'\n  action :${5:sync}\nend'
  'supports':
    'prefix': 'supports'
    'body': 'supports :status => :${1:true}, :restart => :${2:true}, :reload => :${3:true}'
  'template':
    'prefix': 'template'
    'body': 'template \'${1:/tmp/config.conf}\' do\n  source \'${2:config.conf.erb}\'\n  owner \'${3:root}\'\n  group \'${4:root}\'\n  mode ${5:00744}\nend'
  'templatev':
    'prefix': 'templatev'
    'body': 'template "${1:name}" do\n source "${2:source}.erb"\n  owner "root"\n  group "root"\n  node "0644"\n   variables( ${3::config_var => node[:configs][:config_var]}  )\nend'
  'user':
    'prefix': 'user'
    'body': 'user \'${1:random}\' do\n  comment \'${2:Random User}\'\n  uid \'${3:1000}\'\n  gid \'${4:users}\'\n  shell \'${5:/bin/zsh}\'\nend'
  'windows_package':
    'prefix': 'windows_package'
    'body': 'windows_package \'${1:name}\' do\n  action :${2:install}\nend'
  'windows_service':
    'prefix': 'windows_service'
    'body': 'windows_service \'${1:BITS}\' do\n  action :${2:configure_startup}\n  startup_type :${3:manual}\nend'
  'yum_package':
    'prefix': 'yum_package'
    'body': 'yum_package \'${1:name}\' do\n  action :${2:install}\nend'
