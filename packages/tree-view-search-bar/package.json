{
  "_args": [
    [
      {
        "raw": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
        "spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
        "type": "local"
      },
      "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/apm-install-dir-117416-27091-h47fds.1z81pjh5mi"
    ]
  ],
  "_from": "../d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
  "_id": "tree-view-search-bar@0.1.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/tree-view-search-bar",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
    "spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
  "_shasum": "209c6c83c7980c4a8362c7c5ebfcdd6037797d64",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/d-117416-27091-1j8r5dv.wmz6apds4i/package.tgz",
  "_where": "/private/var/folders/qm/j2lz1zs96_x_cvwml2g_2nhm0000gn/T/apm-install-dir-117416-27091-h47fds.1z81pjh5mi",
  "bugs": {
    "url": "https://github.com/lixinliang/tree-view-search-bar/issues"
  },
  "configSchema": {
    "autoToggle": {
      "type": "boolean",
      "default": true
    }
  },
  "dependencies": {
    "atom-space-pen-views": "^2.2.0",
    "atom-utils": "^0.9.2",
    "jquery": "^2.2.4",
    "minimatch": "^3.0.0"
  },
  "description": "🔍A file/directory filter plugin.",
  "devDependencies": {},
  "engines": {
    "atom": ">=1.0.0 <2.0.0"
  },
  "homepage": "https://github.com/lixinliang/tree-view-search-bar#readme",
  "keywords": [
    "tree-view",
    "finder",
    "filter",
    "search"
  ],
  "license": "MIT",
  "main": "./lib/main",
  "name": "tree-view-search-bar",
  "optionalDependencies": {},
  "readme": "[![apm](https://img.shields.io/apm/l/tree-view-search-bar.svg)](https://atom.io/packages/tree-view-search-bar)\n[![apm](https://img.shields.io/apm/v/tree-view-search-bar.svg)](https://atom.io/packages/tree-view-search-bar)\n[![apm](https://img.shields.io/apm/dm/tree-view-search-bar.svg)](https://atom.io/packages/tree-view-search-bar)\n[![Twitter](https://img.shields.io/badge/twitter-@qq393464140-blue.svg)](http://twitter.com/qq393464140)\n\n# tree-view-search-bar\n> 🔍A file/directory filter plugin.\n\n# <a name=\"Menu\"></a>Menu\n> 目录\n\n* [Intro](#Intro)\n* [Install (安装)](#Install)\n* [Changelog (更新日志)](#Changelog)\n* [Usage (使用方法)](#Usage)\n    * [String : 字符](#String)\n    * [File : 文件](#File)\n    * [Path : 路径](#Path)\n    * [Combo : 组合](#Combo)\n* [Notice (注意事项)](#Notice)\n\n## <a name=\"Intro\"></a>Intro [[↑]](#Menu)\n\nActually, `tree-view-search-bar` is more like a file-filter tool.\n\n`tree-view-filter` is a good plugin to filter files, but there are something different between `tree-view-filter` and `tree-view-search-bar`.\n\n* `tree-view-search-bar` could filter directories.\n* `tree-view-search-bar` could filter files without extension name.\n\n## <a name=\"Install\"></a>Install [[↑]](#Menu)\n> 安装\n\n* `apm install tree-view-search-bar` or [https://atom.io/packages/tree-view-search-bar](https://atom.io/packages/tree-view-search-bar)\n* command: `search-bar:toggle`\n* or shortcut:\n    * `ctrl-cmd-shift-f` in `darwin`.\n    * `ctrl-alt-shift-f` in `win32` and `linux`.\n    * You should focus in `tree-view` or `editor` first.\n* enjoy it ☺️\n\n## <a name=\"Changelog\"></a>Changelog [[↑]](#Menu)\n> 更新日志\n\n* 0.0.2 (2016-08-22) :\n    * Add keyboard shortcut to toggle plugin.\n    * `ctrl-cmd-shift-f` in `darwin`.\n    * `ctrl-alt-shift-f` in `win32` and `linux`.\n* 0.0.3 (2016-09-22) :\n    * Focus after show.\n* 0.1.1 (2016-10-30) :\n    * Auto toggle when open a new window.\n        * require tree-view still.\n    * \"ctrl-alt-shift-f/ctrl-cmd-shift-f\" shortcut feature now is \"focus\" instead \"toggle\".\n        * Now you can use this shortcut and \"esc\", switch the search-bar and your workspace quickly.\n    * When you focus search-bar and search-bar is not exist, search-bar will auto show.\n* 0.1.2 (2016-12-04) :\n    * Rename initialize to initializePackage.\n\n\n## <a name=\"Usage\"></a>Usage [[↑]](#Menu)\n> 使用方法\n\nMatch Rule\n> 匹配规则\n\n* Rule1 : When the input of `tree-view-search-bar` is not empty, all files or directories in `tree-view` will be hidden.\n> 规则1 : 当输入框不为空时，所有的文件都会隐藏。\n\n* Rule2 : If the file or directory matches one of the expressiones, it will be visible.\n> 规则2 : 只要符合输入的所有表达式的其中一条该文件或者文件夹就会显示。\n\n* Rule3 : There is a directory including at least one file or directory which is matched Rule2 that will be visible.\n> 规则3 : 当文件夹包含某个符合规则2的子文件或者子文件夹时该文件夹会显示。\n\n* Rule4 : If this directory is collapsed, Rule3 is not suitable to this directory, Rule2 is not suitable to its subfile or subdirectory.\n> 规则4 : 该文件夹处于收拢状态时，它的子文件或者子文件夹不会应用规则2，该文件夹不会应用规则3。\n\n### <a name=\"String\"></a>String : 字符 [[↑]](#Menu)\n\n* Match all files or directories which are include the string you type.\n> 匹配包含该字符串的文件与文件夹。\n\n* Case Insensitivity.\n> 大小写不敏感。\n\n1. `tree-view-search-bar` includes `tree`.\n> `tree-view-search-bar` 包含字符串 `tree`。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/string-1.png)\n\n2. `atom-reveal-file-in-finder`, `main.js`, `intro.png` includes `in`, `lib` is visible because [`Rule3`](#Usage).\n> `atom-reveal-file-in-finder`，`main.js`，`intro.png` 包含字符串 `in`，`lib`因为[`规则3`](#Usage)而显示。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/string-2.png)\n\n3. Case Insensitivity.\n> 大小写不敏感。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/string-3.png)\n\n### <a name=\"File\"></a>File : 文件 [[↑]](#Menu)\n\n* If the string you type include character `.` that will search file only.\n> 使用`.`来识别文件类型.\n\n* Support Regular Expression.\n> 允许使用正则.\n\n* Character `*` can match all filename.\n> 使用`*`来代表任何长度的文件名.\n\n* Character `*` can match all file extension.\n> 使用`*`来代表任何长度的文件类型.\n\n1. Match all files if their extension are `md`.\n> 匹配所有后缀为`md`的文件。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/file-1.png)\n\n2. Match all files if their extension are `md` and the last character of filename are `e`.\n> 匹配所有后缀为`md`且最后的字母为`e`的文件。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/file-2.png)\n\n3. All files will be match.\n> 全部文件都会被匹配。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/file-3.png)\n\n### <a name=\"Path\"></a>Path : 路径 [[↑]](#Menu)\n\n* If the string you type include character `/` or `\\` that will match the file path.\n> 使用`/`或者`\\`来识别路径类型。\n\n* Each part of path will apply as same as [`String Rule`](#String) to filter the directories.\n> 每一段路径使用[`字符`](#String)的匹配去过滤文件夹。\n\n* If `/` or `\\` is the last character, all subfile or subdirectory of the match directory will display.\n> 当以`/`或者`\\`结尾时, 默认显示该文件夹下全部文件与文件夹。\n\n1. `tree-view-search-bar` includes `tree`, `view.less` includes `less`, `styles` is visible because [`Rule3`](#Usage).\n> `tree-view-search-bar` 包含字符串 `tree`，`view.less` 包含字符串 `less`，`styles`因为[`规则3`](#Usage)而显示。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/path-1.png)\n\n2. `tree-view-search-bar` includes `tree`, and its subfiles or subdirectories are visible because the last character is `/`.\n> `tree-view-search-bar` 包含字符串 `tree`，以`/`结尾时, 显示该文件夹下全部文件与文件夹。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/path-2.png)\n\n3. `tree-view-search-bar` includes `tree`, `lib` includes `lib`, and subfiles or subdirectories of `lib` are visible because the last character is `/`.\n> `tree-view-search-bar` 包含字符串 `tree`，`lib` 包含字符串 `lib`，以`/`结尾时, 显示`lib`下全部文件与文件夹。\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/path-3.png)\n\n### <a name=\"Combo\"></a>Combo : 组合 [[↑]](#Menu)\n\n* Use `space` to split each expression.\n> 使用`空格`分割每一条表达式。\n\n* Match one of the expressiones will be displayed.\n> 只要符合其中一条表达式的匹配规则则会显示。\n\n1. like this:\n> 例子：\n\n    ![](https://raw.githubusercontent.com/lixinliang/tree-view-search-bar/master/images/combo-1.png)\n\n## <a name=\"Notice\"></a>Notice [[↑]](#Menu)\n> 注意事项\n\n* Do not match any files or directories which in the collapse directory.\n> 收拢的文件夹内的文件不会被匹配到。\n\n* If you collapse a directory which include matched file or directory and this directory do not match any expression, then this directory will not display in the result list.\n> 一个文件夹本身没有被匹配只因为其包含了被匹配的文件或者文件夹而显示时，收拢该文件夹将会导致该文件夹在匹配结果列表上消失。\n\n## TODO [[↑]](#Menu)\n\n* 大小写敏感(Case Sensitivity)\n* 匹配正则表达式(Regular Expression)\n* 关键字补全(Autocomplete)\n* 模糊搜索(Fuzzy)\n* 匹配高亮(Highlight)\n* 深度匹配(Match file in fold directory)\n\n## License [[↑]](#Menu)\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lixinliang/tree-view-search-bar.git"
  },
  "version": "0.1.8"
}
