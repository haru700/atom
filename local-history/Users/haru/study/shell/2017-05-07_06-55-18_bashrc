###
# プロンプト: gitのブランチ名表示
function parse_git_branch{
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ [¥1]/'
}

function prompts{
  # 色は気分で変えたいかもしれないので宣言しておく
  local BLUE="\[¥e[1;34m\]"
  local RED="\[¥e[1;31m\]"
  local GREEN="\[¥e[1;32m\]"
  local WHITE="\[¥e[00m\]"
  local GRAY="\[¥e[1;37m\]"

  case $v in
    xterm*) TITLEBAR='\[[¥e]0;¥W¥007\]' ;;
    *) TITLEBAR=""  ;;
  esac
  local  BASE="¥u@¥h"

  PS1="${TITLEBAR}${GREEN}${BASE}${WHITE}:${BLUE}¥w${GREEN}¥$(parse_git_branch)${BLUE} ${GRAY} ¥$${WHITE} "

}
prompts

###
# エイリアス設定

alias grep="grep --color"
alias ls="ls -aF"
alias ps="ps --sort=start_time"

###
# コマンド実行後に終了ステータス表示
function  __show_status(){
  local staatus="$(echo ${PIPESTATUS[@]})"
  local SETCOLOR_SUCCESS="echo -en ¥¥033[1;32m"
  local SETCOLOR_FAILURE="echo -en ¥¥033[1;31m"
  local SETCOLOR_WARNING="echo -en ¥¥033[1;33m"
  local SETCOLOR_NORMAL="echo -en ¥¥033[0;39m"

  local SETCOLOR s

  for s in ${status}
  do
    if [ ${s} -gt 100 ] ; then
      SETCOLOR=${SETCOLOR_FAILURE}
    elif [ ${s} -gt 0 ] ; then
      SETCOLOR=${SETCOLOR_WARNING}
    else
      SETCOLOR=${SETCOLOR_SUCCESS}
    fi
  done
  ${SETCOLOR}
  echo "(${status// /|})"
  ${SETCOLOR_NORMAL}
}
PROMPT_COMMAND='__show_status;'${PROMPT_COMMAND//__SHOW_STATUS;/}
# vim:ts=4:sw=4

####
# cd実行後に lsが実行される
cd(){
  builtin cd "$@"
}

cdls (){
  ¥cd "$@" && ls -aF
}

alias cd="cdls"
####
